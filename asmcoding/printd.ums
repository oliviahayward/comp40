# Calling Convention
# r0 is 0
# r1 is the return-address and result register 
# r2 is the call stack pointer 
# r3 is the value stack pointer
# r4 are nonvolatiles
# r5 is a volatile register
# r6, r7 are temps

.section init
    .zero r0
    .temps r6, r7
    
.section text
    ############################################################################
    # printd:
    #    Prints the initial ">>>" and determines whether the value to print is
    #    positive or negative then calls the appropriate function. It also
    #    stores the return address, value, and value stack on the call stack.
    #
    #  input:
    #     call stack: val stack, return address to main, counter
    #      val stack: value(s)
    #           note: r4 = input, r5 = value
    #  output:
    #     call stack: val stack, return address to main, return add, value(s)
    #      val stack: value(s)
    #           note: r4 = value, r5 = counter
    ############################################################################
    printd:
        # r0 holds the value 0
        # r1 holds the return address to newline_loop
        # r2 holds the callstack pointer
        # r3 holds the value stack pointer
        # r4 holds the value to be printed
        # r5 holds the counter, which keeps track of how many digits are in
        #    the number
        # r6, r7 are temps

        #assumes there is a number in the value stack
        #output "printd"
        r4 := r5
        pop r5 off stack r2     #counter
        # r4 := r4 + 48
        # output r4
        # r4 := r4 - 48
        #pop r4 off stack r3     #value
        
        
        push r1 on stack r2     #return address to newline_loop
        output ">>> "
        r1 := 0x80000000
        if (r4 == r1) goto print_neg_test using r1
        if (r4 <s r0) goto print_neg using r1
        push r4 on stack r3     #value back on value stack
        push r3 on stack r2
        push r4 on stack r2     #push value on call stack
        goto print_loop
        
    ############################################################################
    # print_loop:
    #     Finds the least significant digit of a value, stores that in the call
    #     stack, then divides the value by 10 and calls itself with that new
    #     value. When it finds the most significant digit, it goes to base_case.
    #   input
    #     call stack: val stack, return address to main, return add, value(s)
    #      val stack: value(s)
    #           note: r4 = val, r5 = counter
    #   output
    #     call stack: val stack, return address to main, return add, least sig
    #                 digit, mid digit, most SD
    #      val stack: value(s)
    #           note: r4 = msd, r5 = counter
    ############################################################################
    print_loop:
        # r0 holds the value 0
        # r1 holds the least significant digit initially, then holds the 
        #    number without the LSD
        # r2 holds the callstack pointer
        # r3 holds the value 10 for calculations and then is used to go to
        #    base_case
        # r4 holds the value the calculations will be done on
        # r5 holds the counter, which keeps track of how many digits are in the
        #    value
        # r6, r7 are temps

        #output "printloop\n"
        pop r4 off stack r2         #values
        # r4 := r4 + 48
        # output r4
        # output "test"
        # r4 := r4 - 48
        r3 := 10
        r1 := r4 mod r3             #getting the least significant digit
        r5 := r5 + 1                #increasing count
        if ( r1 == r4 ) goto base_case using r3 #if lsd = original value, then print
        push r1 on stack r2         #pushing lsd onto value stack
        r1 := r4 / 10               #getting number without last digit
        push r1 on stack r2         #pushes number without last digit to value stack
        
        goto print_loop             #restarts loop

    ############################################################################
    # base_case:
    #   Prints out the first digit on the call stack which is the
    #   most significant digit. It loops through, popping off digits
    #   and printing them out. 
    #   
    #   input
    #     call stack: val stack, return address to main, return add, least sig
    #                 digit, mid digit, most SD
    #      val stack: value(s)
    #           note: r4 = msd, r5 = counter
    #   output
    #     call stack: val stack, return address to main, return add
    #      val stack: value(s)
    #           note: r4 = lsd, r5 = counter
    ############################################################################
    base_case:
        # r0 holds the value 0
        # r1 is used to go to exit_print
        # r2 holds our call stack
        # r3 holds a garbage value
        # r4 holds the most significant digit of the value
        # r5 holds the counter, which keeps track of how many digits are in the
        #    value
        # r6, r7 are temps

        #output "base"
        push r4 on stack r2
        # r5 := r5 + 48
        # output r5
        # r5 := r5 - 48
        if (r5 == r0) goto exit_print using r1
        r4 := r4 + 48                   
        output r4                       #print msd
        r4 := r4 - 48                    
        r5 := r5 - 1                    #decrement counter
        pop r4 off stack r2 
        pop r4 off stack r2
        goto base_case 

    ############################################################################
    # exit_print:
    #   Prints a new line, updates value stack with new values,
    #   returns to newline_loop
    #   input:
    #       call stack: val stack, return address to main, return add
    #        val stack: value(s)
    #             note: r4 = lsd, r5 = counter
    #   output:
    #       call stack: val stack, return address to main
    #        val stack: value(s)
    #             note: r4 = lsd, r5 = counter
    ############################################################################
    exit_print:
        # r0 is reset to 0
        # r1 holds the return address to newline_loop
        # r2 holds our callstack pointer
        # r3 holds our updated value stack
        # r4 holds the address and offset where our next value in the
        #    value stack is located
        # r5 holds our counter for the current value
        # r6, r7 are temps

        #output "exit print"
        output '\n'
        
        pop r3 off stack r2 #value stack
        pop r1 off stack r2 #printd
        pop r4 off stack r2    #valstack address
        # pop r0 off stack r2 #callmain address
        pop stack r2 #old valstack
        push r3 on stack r2     #add new valstack as first thing on callstack
        # push r0 on stack r2
        # pop r4 off stack r2 
        # if (r1 == waiting) goto print_neg using r5
        r0 := 0
        # push r0 on stack r3 #push waiting on value stack
        goto r1
    

    ############################################################################
    # print_neg:
    #   Prints a negative number stored in r4, goes to print_loop.
    #   
    ############################################################################

    print_neg:
        # r0 holds the value 0
        # r1 holds the return address to newline_loop
        # r2 holds the callstack pointer
        # r3 holds the value stack pointer
        # r4 holds the negative value to be printed
        # r5 holds the counter, which keeps track of how many digits are in
        #    the number
        # r6, r7 are temps

        output '-'
        r4 := -r4
        push r4 on stack r3
        push r3 on stack r2
        push r4 on stack r2
        goto print_loop

    print_neg_test:
        output '-'
        r4 := -r4
        push r4 on stack r3
        push r3 on stack r2
        push r4 on stack r2
        goto print_loop